if (is_osx) view.windowBlurbehind = #light;
stdout.println("current platform:", OS);
stdout.println("is_xfce: ", is_xfce);

// html min-width, min-height not working on mac, below works for all
view.windowMinSize = (scaleIt(605), scaleIt(445));


var app;
var tmp = handler.get_connect_status();
var connect_status = tmp[0];
var service_stopped = handler.get_option("stop-service") == "Y";
var using_public_server = handler.using_public_server();
var software_update_url = "";
var key_confirmed = tmp[1];
var system_error = "";

var svg_menu = <svg #menu viewBox="0 0 512 512">
	<circle cx="256" cy="256" r="64"/>
	<circle cx="256" cy="448" r="64"/>
	<circle cx="256" cy="64" r="64"/>
</svg>;
var svg_refresh_password = <svg #refresh-password xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M2.5 2v6h6M2.66 15.57a10 10 0 1 0 .57-8.38"/></svg>;

var svg_itb_logo = <svg #itb_logo xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 width="80%" viewBox="0 0 815.3 115.3" style="enable-background:new 0 0 815.3 115.3;" xml:space="preserve"	><g>	<g>		<path style="fill:#FDC300;" d="M812.2,94.2c-2,0.8-4.3,1.4-6.8,1.8c-2.5,0.4-4.9,0.7-7.2,0.7c-4.9,0-8.1-1.4-9.7-4.1			c-1.6-2.7-2.4-6.4-2.4-10.9v-27h26.1V36.5h-26.1V0l-21.8,3.5v78.4c0,5,0.5,9.5,1.4,13.6c0.9,4.1,2.6,7.6,4.9,10.4			c2.3,2.9,5.4,5.1,9.3,6.7c3.9,1.6,8.8,2.4,14.7,2.4c4.7,0,8.6-0.4,11.8-1.2c3.2-0.8,6.1-1.7,8.8-2.8L812.2,94.2z"/>		<path style="fill:#FDC300;" d="M743.9,1.5c-3.5,0-6.5,1.1-9.1,3.4c-2.6,2.3-3.9,5.4-3.9,9.4c0,4,1.3,7.1,3.9,9.4			c2.6,2.3,5.6,3.4,9.1,3.4c3.5,0,6.5-1.1,9.1-3.4c2.6-2.3,3.9-5.4,3.9-9.4c0-4-1.3-7.1-3.9-9.4C750.4,2.6,747.4,1.5,743.9,1.5z"/>		<rect x="733.1" y="36.5" style="fill:#FDC300;" width="21.8" height="76.8"/>	</g>	<g>		<path style="fill:#EDEDEE;" d="M21.8,56.3V38.2v-7.8V0L0,3.5v107.3c1.9,0.6,4.2,1.1,6.7,1.7c2.5,0.5,5.2,1,8,1.4			c2.3,0.3,4.7,0.6,7.1,0.8V95.9V56.3z"/>		<path style="fill:#EDEDEE;" d="M275.5,96c-2.5,0.4-4.9,0.7-7.2,0.7c-4.9,0-8.1-1.4-9.7-4.1c-1.6-2.7-2.4-6.4-2.4-10.9v-27h26.1			V36.5h-26.1V0l-21.8,3.5v78.4c0,5,0.5,9.5,1.4,13.6c0.9,4.1,2.6,7.6,4.9,10.4c2.3,2.9,5.4,5.1,9.3,6.7c3.9,1.6,8.8,2.4,14.7,2.4			c4.7,0,8.6-0.4,11.8-1.2c3.2-0.8,6.1-1.7,8.8-2.8l-3.1-16.9C280.2,94.9,278,95.5,275.5,96z"/>		<rect x="203.1" y="36.5" style="fill:#EDEDEE;" width="21.8" height="76.8"/>		<path style="fill:#EDEDEE;" d="M213.9,1.5c-3.5,0-6.5,1.1-9.1,3.4c-2.6,2.3-3.9,5.4-3.9,9.4c0,4,1.3,7.1,3.9,9.4			c2.6,2.3,5.6,3.4,9.1,3.4c3.5,0,6.5-1.1,9.1-3.4c2.6-2.3,3.9-5.4,3.9-9.4c0-4-1.3-7.1-3.9-9.4C220.4,2.6,217.4,1.5,213.9,1.5z"/>		<path style="fill:#EDEDEE;" d="M161.1,34.5c-4.7,0-9.2,0.9-13.6,2.6c-2.2,0.9-4.3,2-6.3,3.2c-2,1.3-3.8,2.8-5.5,4.5			c-2.6,2.6-4.7,5.6-6.6,9.1c-0.6,1.2-1.2,2.4-1.7,3.7c-0.5,1.3-1,2.6-1.4,4c-1.2,4.2-1.8,8.8-1.8,13.9c0,5.6,0.8,10.9,2.4,15.8			c1.2,3.6,2.9,6.9,5.1,9.8c0.7,1,1.5,1.9,2.4,2.8c0.8,0.9,1.7,1.7,2.7,2.5c0.9,0.8,2,1.5,3,2.2c2.1,1.4,4.5,2.6,7,3.6			c2.9,1.1,6,2,9.5,2.5c1.1,0.2,2.3,0.3,3.5,0.4c1.6,0.1,3.3,0.2,5,0.2c1.4,0,2.7,0,4.1-0.1c1.4-0.1,2.7-0.2,4.1-0.3			c1.4-0.1,2.7-0.3,4-0.5c1.3-0.2,2.5-0.4,3.7-0.6c2.4-0.4,4.5-0.9,6.5-1.5c1.9-0.6,3.5-1.2,4.7-1.8L189,92.8			c-2.4,1.1-5.6,2-9.4,2.7c-3.8,0.7-7.8,1.1-11.8,1.1c-6.2,0-11.2-1.3-14.9-3.9c-0.9-0.7-1.7-1.4-2.5-2.1c-0.7-0.8-1.3-1.6-1.9-2.5			c-0.3-0.4-0.5-0.9-0.7-1.4c-0.6-1.4-1-3-1.2-4.6H196c0.1-1.2,0.2-2.5,0.3-4c0.1-1.5,0.1-2.9,0.1-4.2c0-12.9-3.2-22.7-9.5-29.4			C180.6,37.8,172,34.5,161.1,34.5z M175.4,67.1h-28.8c0.3-1.8,0.8-3.7,1.4-5.5c0.6-1.8,1.5-3.4,2.7-4.7c1.2-1.4,2.6-2.5,4.4-3.3			c1.8-0.8,3.8-1.2,6.3-1.2c2.5,0,4.6,0.4,6.3,1.3c1.7,0.9,3.1,2,4.2,3.4c1.1,1.4,1.9,2.9,2.5,4.7c0.3,0.9,0.5,1.8,0.6,2.7			C175.3,65.3,175.4,66.2,175.4,67.1L175.4,67.1z"/>		<path style="fill:#EDEDEE;" d="M671.6,36.1c-5.8,0.9-10.6,1.9-14.3,3v74.2H679V54V35.2C676.5,35.5,674,35.7,671.6,36.1z"/>		<rect x="625.2" y="36.5" style="fill:#EDEDEE;" width="21.8" height="76.8"/>		<path style="fill:#EDEDEE;" d="M583.3,34.5c-4.7,0-9.2,0.9-13.6,2.6c-4.4,1.8-8.3,4.3-11.8,7.7c-3.4,3.4-6.2,7.7-8.2,12.8			c-2.1,5.1-3.1,11.1-3.1,17.9c0,5.6,0.8,10.9,2.4,15.8c1.6,4.9,4.1,9.1,7.4,12.6c3.4,3.6,7.6,6.4,12.7,8.4c5.1,2,11.1,3.1,18,3.1			c2.7,0,5.4-0.1,8.2-0.4c2.7-0.3,5.3-0.7,7.7-1.1c2.4-0.4,4.5-0.9,6.5-1.5c1.9-0.6,3.5-1.2,4.7-1.8l-2.9-17.7			c-2.4,1.1-5.6,2-9.4,2.7c-3.8,0.7-7.8,1.1-11.8,1.1c-6.2,0-11.2-1.3-14.9-3.9c-3.7-2.6-5.8-6.2-6.3-10.7h49.3			c0.1-1.2,0.2-2.5,0.3-4c0.1-1.5,0.1-2.9,0.1-4.2c0-12.9-3.2-22.7-9.5-29.4C602.8,37.8,594.2,34.5,583.3,34.5z M568.8,67.1			c0.3-1.8,0.8-3.7,1.4-5.5c0.6-1.8,1.5-3.4,2.7-4.7c1.2-1.4,2.6-2.5,4.4-3.3c1.8-0.8,3.8-1.2,6.3-1.2c2.5,0,4.6,0.4,6.4,1.3			c1.7,0.9,3.1,2,4.2,3.4c1.1,1.4,1.9,2.9,2.5,4.7c0.5,1.8,0.9,3.6,0.9,5.4H568.8z"/>		<path style="fill:#EDEDEE;" d="M636,1.5c-3.5,0-6.5,1.1-9.1,3.4c-2.6,2.3-3.9,5.4-3.9,9.4c0,4,1.3,7.1,3.9,9.4			c2.6,2.3,5.6,3.4,9.1,3.4c3.5,0,6.5-1.1,9.1-3.4c2.6-2.3,3.9-5.4,3.9-9.4c0-4-1.3-7.1-3.9-9.4C642.6,2.6,639.5,1.5,636,1.5z"/>		<path style="fill:#EDEDEE;" d="M383.7,35.2c-2.5,0.2-5,0.5-7.4,0.9c-5.8,0.9-10.6,1.9-14.3,3v74.2h21.8V54V35.2z"/>		<path style="fill:#EDEDEE;" d="M538.8,96c-2.5,0.4-4.9,0.7-7.2,0.7c-4.9,0-8.1-1.4-9.7-4.1c-1.6-2.7-2.4-6.4-2.4-10.9v-27h26.1			V36.5h-26.1V0l-21.8,3.5v78.4c0,5,0.5,9.5,1.4,13.6c0.9,4.1,2.6,7.6,4.9,10.4c2.3,2.9,5.5,5.1,9.3,6.7c3.9,1.6,8.8,2.4,14.7,2.4			c4.7,0,8.6-0.4,11.8-1.2c3.2-0.8,6.1-1.7,8.8-2.8l-3.1-16.9C543.5,94.9,541.2,95.5,538.8,96z"/>		<path style="fill:#EDEDEE;" d="M320,34.5c-4.7,0-9.2,0.9-13.6,2.6c-4.4,1.8-8.3,4.3-11.8,7.7c-3.4,3.4-6.2,7.7-8.2,12.8			c-2.1,5.1-3.1,11.1-3.1,17.9c0,5.6,0.8,10.9,2.4,15.8c1.6,4.9,4.1,9.1,7.4,12.6c3.4,3.6,7.6,6.4,12.7,8.4c5.1,2,11.1,3.1,18,3.1			c2.7,0,5.4-0.1,8.2-0.4c2.7-0.3,5.3-0.7,7.7-1.1c2.4-0.4,4.5-0.9,6.5-1.5c1.9-0.6,3.5-1.2,4.7-1.8l-2.9-17.7			c-2.4,1.1-5.6,2-9.4,2.7c-3.8,0.7-7.8,1.1-11.8,1.1c-6.2,0-11.2-1.3-14.9-3.9c-3.7-2.6-5.8-6.2-6.3-10.7h49.3			c0.1-1.2,0.2-2.5,0.3-4c0.1-1.5,0.1-2.9,0.1-4.2c0-12.9-3.2-22.7-9.5-29.4C339.5,37.8,330.9,34.5,320,34.5z M305.5,67.1			c0.3-1.8,0.8-3.7,1.4-5.5c0.6-1.8,1.5-3.4,2.7-4.7c1.2-1.4,2.6-2.5,4.4-3.3c1.8-0.8,3.8-1.2,6.3-1.2c2.5,0,4.6,0.4,6.4,1.3			c1.7,0.9,3.1,2,4.2,3.4c1.1,1.4,1.9,2.9,2.5,4.7c0.5,1.8,0.9,3.6,0.9,5.4H305.5z"/>		<path style="fill:#EDEDEE;" d="M487.5,77.2c-1.8-2-4.3-3.8-7.4-5.5c-3.1-1.7-7.1-3.5-11.8-5.2c-2.3-0.9-4.3-1.7-5.8-2.4			c-1.5-0.7-2.7-1.4-3.6-2c-0.9-0.6-1.5-1.3-1.8-2c-0.3-0.7-0.4-1.5-0.4-2.3c0-3.8,3.4-5.7,10.2-5.7c3.7,0,7,0.3,10,1			c3,0.7,5.7,1.5,8.2,2.3l3.8-16.9c-2.5-1-5.9-1.9-10.2-2.7c-4.3-0.8-8.8-1.2-13.4-1.2c-9.3,0-16.7,2.1-22,6.3			c-5.4,4.2-8,9.9-8,17.1c0,3.7,0.5,6.9,1.6,9.5c1.1,2.6,2.6,4.9,4.5,6.8c1.9,1.9,4.3,3.5,7.1,4.9c2.8,1.4,5.9,2.7,9.3,3.9			c4.4,1.7,7.6,3.1,9.8,4.5s3.2,2.8,3.2,4.6c0,2.2-0.8,3.7-2.5,4.5c-1.7,0.8-4.5,1.2-8.5,1.2c-3.8,0-7.6-0.4-11.5-1.2			c-3.9-0.8-7.7-2-11.4-3.4l-3.6,17.7c1.8,0.8,4.9,1.8,9.4,2.9c4.5,1.2,10.2,1.8,17,1.8c10.4,0,18.5-1.9,24.2-5.8			c5.7-3.9,8.5-9.6,8.5-17.2c0-3.2-0.4-6-1.1-8.4C490.5,81.4,489.3,79.2,487.5,77.2z"/>		<path style="fill:#EDEDEE;" d="M713,89.6c-3.5,0-6.5,1.1-9.1,3.4c-2.6,2.3-3.9,5.4-3.9,9.4c0,4,1.3,7.1,3.9,9.4			c2.6,2.3,5.6,3.4,9.1,3.4c3.5,0,6.5-1.1,9.1-3.4c2.6-2.3,3.9-5.4,3.9-9.4c0-4-1.3-7.1-3.9-9.4C719.5,90.8,716.5,89.6,713,89.6z"/>		<path style="fill:#EDEDEE;" d="M126,37.1c-0.7-0.2-1.5-0.4-2.3-0.6c-1.7-0.3-3.3-0.6-5-0.9c-1.7-0.2-3.3-0.4-5-0.6			c-0.8-0.1-1.6-0.1-2.3-0.2c-0.7,0-1.3-0.1-1.9-0.1c-3.3,0-6.4,0.2-9.3,0.5c-0.2,0-0.3,0-0.5,0.1c-2.8,0.3-5.4,0.7-8,1.3			c-5.3,1.2-9.9,2.5-13.8,3.9v72.7h21.8V55.8v-1.2c1-0.3,2.4-0.6,4.3-0.8c1.9-0.2,3.5-0.4,4.9-0.4c3,0,5.8,0.3,8.5,0.8			c2.6,0.5,4.9,1,6.9,1.5l3.6-18C127.4,37.6,126.7,37.3,126,37.1z"/>		<path style="fill:#EDEDEE;" d="M62.8,45.8c-2.8-3.5-6.3-6.2-10.5-8.1c-4.2-1.9-9-2.8-14.5-2.8c-3,0-5.8,0.3-8.5,0.9			c-2.6,0.6-5.2,1.4-7.6,2.5v18.1c1.4-0.9,3.1-1.6,5.3-2.2c2.2-0.6,4.4-0.9,6.6-0.9c10.3,0,15.5,7,15.5,21c0,6.7-1.5,12.1-4.5,16.2			c-3,4.1-7.5,6.1-13.4,6.1c-1.9,0-3.7-0.1-5.4-0.2c-1.7-0.1-3-0.3-4.1-0.5v18.7c0.5,0,0.9,0.1,1.4,0.2c2.9,0.2,5.6,0.4,8.2,0.4			c6.3,0,12-0.9,16.9-2.8c5-1.9,9.1-4.6,12.6-8.1c3.4-3.5,6-7.7,7.8-12.7c1.8-5,2.7-10.5,2.7-16.6c0-6-0.7-11.5-2.2-16.4			C67.7,53.5,65.6,49.3,62.8,45.8z"/>		<path style="fill:#EDEDEE;" d="M701.8,89.3c3.2-2.6,7-3.9,11.2-3.9c3.9,0,7.5,1.1,10.5,3.4V69.9c0-5.3-0.5-10-1.6-14.3			c-1.1-4.3-2.9-8-5.4-11.1c-2.5-3.1-6-5.5-10.3-7.2c-4.3-1.7-9.8-2.6-16.3-2.6c-3.8,0-7.4,0.2-10.9,0.5V54c1.4-0.2,2.9-0.4,4.7-0.5			c1.8-0.1,3.4-0.2,5-0.2c5.1,0,8.5,1.5,10.4,4.4c1.8,2.9,2.8,7.9,2.8,14.9V89.3z"/>		<path style="fill:#EDEDEE;" d="M388.4,53.5c1.8-0.1,3.4-0.2,5-0.2c5.1,0,8.5,1.5,10.4,4.4c1.8,2.9,2.8,7.9,2.8,14.9v40.7h21.8			V69.9c0-5.3-0.5-10-1.6-14.3c-1.1-4.3-2.9-8-5.4-11.1c-2.5-3.1-6-5.5-10.3-7.2c-4.3-1.7-9.8-2.6-16.3-2.6c-3.8,0-7.4,0.2-10.9,0.5			V54C385,53.8,386.6,53.6,388.4,53.5z"/>	</g>	<g style="opacity:0.3;">		<linearGradient id="SVGID_1_" gradientUnits="userSpaceOnUse" x1="21.7507" y1="75.0326" x2="73.5613" y2="75.0326">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>		<path style="fill:url(#SVGID_1_);" d="M62.8,45.8c-2.8-3.5-6.3-6.2-10.5-8.1c-4.2-1.9-9-2.8-14.5-2.8c-3,0-5.8,0.3-8.5,0.9			c-2.6,0.6-5.2,1.4-7.6,2.5v18.1c1.4-0.9,3.1-1.6,5.3-2.2c2.2-0.6,4.4-0.9,6.6-0.9c10.3,0,15.5,7,15.5,21c0,6.7-1.5,12.1-4.5,16.2			c-3,4.1-7.5,6.1-13.4,6.1c-1.9,0-3.7-0.1-5.4-0.2c-1.7-0.1-3-0.3-4.1-0.5v18.7c0.5,0,0.9,0.1,1.4,0.2c2.9,0.2,5.6,0.4,8.2,0.4			c6.3,0,12-0.9,16.9-2.8c5-1.9,9.1-4.6,12.6-8.1c3.4-3.5,6-7.7,7.8-12.7c1.8-5,2.7-10.5,2.7-16.6c0-6-0.7-11.5-2.2-16.4			C67.7,53.5,65.6,49.3,62.8,45.8z"/>					<linearGradient id="SVGID_00000130622834897366590450000017721202778459121800_" gradientUnits="userSpaceOnUse" x1="678.9977" y1="62.0281" x2="728.2222" y2="62.0281">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>		<path style="fill:url(#SVGID_00000130622834897366590450000017721202778459121800_);" d="M701.8,89.3c3.2-2.6,7-3.9,11.2-3.9			c3.9,0,7.5,1.1,10.5,3.4V69.9c0-5.3-0.5-10-1.6-14.3c-1.1-4.3-2.9-8-5.4-11.1c-2.5-3.1-6-5.5-10.3-7.2c-4.3-1.7-9.8-2.6-16.3-2.6			c-3.8,0-7.4,0.2-10.9,0.5V54c1.4-0.2,2.9-0.4,4.7-0.5c1.8-0.1,3.4-0.2,5-0.2c5.1,0,8.5,1.5,10.4,4.4c1.8,2.9,2.8,7.9,2.8,14.9			V89.3z"/>					<linearGradient id="SVGID_00000070089752074488392770000010102265593207056007_" gradientUnits="userSpaceOnUse" x1="383.6864" y1="74.011" x2="430.5117" y2="74.011">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>		<path style="fill:url(#SVGID_00000070089752074488392770000010102265593207056007_);" d="M388.4,53.5c1.8-0.1,3.4-0.2,5-0.2			c5.1,0,8.5,1.5,10.4,4.4c1.8,2.9,2.8,7.9,2.8,14.9v40.7h21.8V69.9c0-5.3-0.5-10-1.6-14.3c-1.1-4.3-2.9-8-5.4-11.1			c-2.5-3.1-6-5.5-10.3-7.2c-4.3-1.7-9.8-2.6-16.3-2.6c-3.8,0-7.4,0.2-10.9,0.5V54C385,53.8,386.6,53.6,388.4,53.5z"/>					<linearGradient id="SVGID_00000157271843975684261520000008912695006616681904_" gradientUnits="userSpaceOnUse" x1="256.1314" y1="45.5452" x2="282.2611" y2="45.5452">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>					<rect x="256.1" y="36.5" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000157271843975684261520000008912695006616681904_);" width="26.1" height="18.1"/>					<linearGradient id="SVGID_00000115511526358214371280000013666896849011269049_" gradientUnits="userSpaceOnUse" x1="305.5299" y1="74.5941" x2="334.2874" y2="74.5941">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>					<rect x="305.5" y="67.1" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000115511526358214371280000013666896849011269049_);" width="28.8" height="14.9"/>					<linearGradient id="SVGID_00000140730345027497137700000013795206834979867056_" gradientUnits="userSpaceOnUse" x1="519.4156" y1="45.5452" x2="545.5014" y2="45.5452">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>					<rect x="519.4" y="36.5" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000140730345027497137700000013795206834979867056_);" width="26.1" height="18.1"/>					<linearGradient id="SVGID_00000152972424831536825440000013840607098579324551_" gradientUnits="userSpaceOnUse" x1="146.6778" y1="74.5951" x2="175.4355" y2="74.5951">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>					<rect x="146.7" y="67.1" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000152972424831536825440000013840607098579324551_);" width="28.8" height="14.9"/>					<linearGradient id="SVGID_00000018218498483754642870000001958443318685694097_" gradientUnits="userSpaceOnUse" x1="568.814" y1="74.5951" x2="597.5715" y2="74.5951">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>					<rect x="568.8" y="67.1" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000018218498483754642870000001958443318685694097_);" width="28.8" height="14.9"/>					<linearGradient id="SVGID_00000116934249200750235250000010023242803758117259_" gradientUnits="userSpaceOnUse" x1="99.761" y1="45.3048" x2="127.9346" y2="45.3048">			<stop  offset="0" style="stop-color:#4D4D4D"/>			<stop  offset="5.889583e-02" style="stop-color:#727272"/>			<stop  offset="0.1248" style="stop-color:#939393"/>			<stop  offset="0.1985" style="stop-color:#AFAFB0"/>			<stop  offset="0.2806" style="stop-color:#C6C6C7"/>			<stop  offset="0.3747" style="stop-color:#D7D7D8"/>			<stop  offset="0.4882" style="stop-color:#E4E4E5"/>			<stop  offset="0.6408" style="stop-color:#EBEBEC"/>			<stop  offset="1" style="stop-color:#EDEDEE"/>		</linearGradient>		<path style="fill:url(#SVGID_00000116934249200750235250000010023242803758117259_);" d="M123.7,36.5c-1.7-0.3-3.3-0.6-5-0.9			c-1.7-0.2-3.3-0.4-5-0.6c-0.8-0.1-1.6-0.1-2.3-0.2c-0.7,0-1.4-0.1-1.9-0.1c-3.3,0-6.4,0.2-9.3,0.5c-0.2,0-0.3,0-0.5,0.1v19.2			c1-0.3,2.4-0.6,4.3-0.8c1.9-0.2,3.5-0.4,4.9-0.4c3,0,5.8,0.3,8.5,0.8c2.6,0.5,4.9,1,6.9,1.5l3.6-18c-0.6-0.2-1.2-0.5-1.9-0.7			C125.3,36.9,124.5,36.7,123.7,36.5z"/>	</g>			<linearGradient id="SVGID_00000105394815058487603000000002192213600072182151_" gradientUnits="userSpaceOnUse" x1="786.116" y1="45.5452" x2="812.1957" y2="45.5452">		<stop  offset="0" style="stop-color:#4D4D4D"/>		<stop  offset="1.744008e-02" style="stop-color:#5A5648"/>		<stop  offset="7.689965e-02" style="stop-color:#806F37"/>		<stop  offset="0.1429" style="stop-color:#A28628"/>		<stop  offset="0.2151" style="stop-color:#BF991C"/>		<stop  offset="0.2955" style="stop-color:#D6A811"/>		<stop  offset="0.3877" style="stop-color:#E7B40A"/>		<stop  offset="0.4988" style="stop-color:#F4BD04"/>		<stop  offset="0.6483" style="stop-color:#FBC101"/>		<stop  offset="1" style="stop-color:#FDC300"/>	</linearGradient>			<rect x="786.1" y="36.5" style="fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000105394815058487603000000002192213600072182151_);" width="26.1" height="18.1"/></g></svg>;


var my_id = handler.get_id();

handler.set_option("allow-darktheme", "Y");

function get_id() {
  my_id = handler.get_id();
  return my_id;
}

class ConnectStatus: Reactor.Component {
    function render() {
        return
            <div .connect-status>
                <span class={"connect-status-icon connect-status" + (service_stopped ? 0 : connect_status)} />
                {this.getConnectStatusStr()}
                {service_stopped ? <span .link #start-service>{translate('Start service')}</span> : ""}
            </div>;
    }

    function getConnectStatusStr() {
        if (service_stopped) {
            return translate("Service is not running");
        } else if (connect_status == -1) {
            return translate('not_ready_status');
        } else if (connect_status == 0) {
            return translate('connecting_status');
        }
        if (!handler.using_public_server()) return translate('Ready');
        return <span>{translate("Ready")}, <span .link #setup-server>{translate("setup_server_tip")}</span></span>;
    }

    event click $(#start-service) () {
        handler.set_option("stop-service", "");
    }

    event click $(#setup-server) () {
        handler.open_url("https://rustdesk.com/blog/id-relay-set/");
    }
}

function createNewConnect(id, type) {
    id = id.replace(/\s/g, "");
    app.remote_id.value = formatId(id);
    if (!id) return;
    var old_id = id;
    id = handler.handle_relay_id(id);
    var force_relay = old_id != id; 
    if (id == my_id) {
        msgbox("custom-error", "Error", "You cannot connect to your own computer");
        return;
    }
    handler.set_remote_id(id);
    handler.new_remote(id, type, force_relay);
}

class ShareRdp: Reactor.Component {
    function render() {
        var rdp_shared_string = translate("Enable RDP session sharing");
        var cls = handler.is_share_rdp()  ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{rdp_shared_string}</li>;
    }
    
    function onClick() {
        handler.set_share_rdp(!handler.is_share_rdp());
        this.update();
    }
}

var direct_server;
class DirectServer: Reactor.Component {
    function this() {
        direct_server = this;
    }

    function render() {
        var text = translate("Enable direct IP access");
        var enabled = handler.get_option("direct-server") == "Y";
        var cls = enabled ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{text}{enabled && <EditDirectAccessPort />}</li>;
    }
    
    function onClick() {
        if (is_edit_rdp_port) {
            is_edit_rdp_port = false;
            return;
        }
        handler.set_option("direct-server", handler.get_option("direct-server") == "Y" ? "" : "Y");
        this.update();
    }
}

var myIdMenu;
var audioInputMenu;
class AudioInputs: Reactor.Component {
    function this() {
        audioInputMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var inputs = handler.get_sound_inputs();
        if (is_win) inputs = ["System Sound"].concat(inputs);
        if (!inputs.length) return <li style="display:hidden" />;
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Audio Input')}
            <menu #audio-input key={inputs.length}>
                <li #enable-audio><span>{svg_checkmark}</span>{translate("Mute")}</li>
                <div .separator />
                {inputs.map(function(name) {
                return <li id={name}><span>{svg_checkmark}</span>{translate(name)}</li>;
                })}
            </menu>
        </li>;
    }

    function get_default() {
        if (is_win) return "System Sound";
        return "";
    }

    function get_value() {
        return handler.get_option("audio-input") || this.get_default();
    }

    function toggleMenuState() {
        var el = this.$(li#enable-audio);
        var enabled = handler.get_option(el.id) != "N";
        el.attributes.toggleClass("selected", !enabled);
        var v = this.get_value();
        for (var el in this.$$(menu#audio-input>li)) {
            if (el.id == 'enable-audio') continue;
            var selected = el.id == v;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#audio-input>li) (_, me) {
        var v = me.id;
        if (v == 'enable-audio') {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        } else {
          if (v == this.get_value()) return;
          if (v == this.get_default()) v = "";
          handler.set_option("audio-input", v);
        }
        this.toggleMenuState();
    }
};

class Languages: Reactor.Component {
    function render() {
        var langs = JSON.parse(handler.get_langs());
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Language')}
            <menu #languages key={langs.length}>
                <li id="default"><span>{svg_checkmark}</span>Default</li>
                <div .separator />
                {langs.map(function(lang) {
                return <li id={lang[0]}><span>{svg_checkmark}</span>{lang[1]}</li>;
                })}
            </menu>
        </li>;
    }


    function toggleMenuState() {
        var cur = handler.get_local_option("lang") || "default";
        for (var el in this.$$(menu#languages>li)) {
            var selected = cur == el.id;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#languages>li) (_, me) {
        var v = me.id;
        if (v == "default") v = "";
        handler.set_local_option("lang", v);
        app.update();
        this.toggleMenuState();
    }
}

var enhancementsMenu;
class Enhancements: Reactor.Component {
    function this() {
        enhancementsMenu = this;
    }

    function render() {
        var has_hwcodec = handler.has_hwcodec();
        var has_gpucodec = handler.has_gpucodec();
        var support_remove_wallpaper = handler.support_remove_wallpaper();
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Enhancements')}
            <menu #enhancements-menu>
                {(has_hwcodec || has_gpucodec) ? <li #enable-hwcodec><span>{svg_checkmark}</span>{translate("Enable hardware codec")}</li> : ""}
                <li #enable-abr><span>{svg_checkmark}</span>{translate("Adaptive bitrate")} (beta)</li>
                <li #screen-recording>{translate("Recording")}</li>
                {support_remove_wallpaper ? <li #allow-remove-wallpaper><span>{svg_checkmark}</span>{translate("Remove wallpaper during incoming sessions")}</li> : ""}
            </menu>
        </li>;
    }

    function toggleMenuState() {
        for (var el in $$(menu#enhancements-menu>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
            } else if (el.id && el.id.indexOf("allow-") == 0) {
                var enabled = handler.get_option(el.id) == "Y";
                el.attributes.toggleClass("selected", enabled);
            }
        }

    }

    event click $(menu#enhancements-menu>li) (_, me) {
        var v = me.id;
        if (v.indexOf("enable-") == 0) {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        } else if (v.indexOf("allow-") == 0) {
            handler.set_option(v, handler.get_option(v) == 'Y' ? '' : 'Y');
        } else if (v == 'screen-recording') {
            var dir = handler.get_option("video-save-directory");
            if (!dir) dir = handler.default_video_save_directory();
            var ts0 = handler.get_option("enable-record-session") == '' ? { checked: true } : {};
            var ts1 = handler.get_option("allow-auto-record-incoming") == 'Y' ? { checked: true } : {};
            msgbox("custom-recording", translate('Recording'),
                <div .form>
                    <div><button|checkbox(enable_record_session) {ts0}>{translate('Enable recording session')}</button></div>
                    <div><button|checkbox(auto_record_incoming) {ts1}>{translate('Automatically record incoming sessions')}</button></div>
                    <div>
                        <div style="word-wrap:break-word"><span>{translate("Directory")}:&nbsp;&nbsp;</span><span #folderPath>{dir}</span></div>
                        <div> <button #select_directory .link>{translate('Change')}</button> </div>
                    </div>
                </div>
                , "", function(res=null) {
                if (!res) return;
                handler.set_option("enable-record-session", res.enable_record_session ? '' : 'N');
                handler.set_option("allow-auto-record-incoming", res.auto_record_incoming ? 'Y' : '');
                handler.set_option("video-save-directory", $(#folderPath).text);
            });
        }
        this.toggleMenuState();
    }
}

function getUserName() {
    try {
        return JSON.parse(handler.get_local_option("user_info")).name;
    } catch(e) {}
    return '';
}

function updateTheme() {
    var root_element = self;
    root_element.attributes.toggleClass("darktheme", true);

    if (handler.get_option("allow-darktheme") == "Y") {
        // enable dark theme
        root_element.attributes.toggleClass("darktheme", true);
    } else {
        // disable dark theme
        root_element.attributes.toggleClass("darktheme", false);
    }
}

class MyIdMenu: Reactor.Component {
    function this() {
        myIdMenu = this;
    }

    function render() {
        return <div #myid>
            {this.renderPop()}
            ID{svg_menu}
        </div>;
    }

    function renderPop() {
        var username = handler.get_local_option("access_token") ? getUserName() : '';
        return <popup>
            <menu.context #config-options>
                <li #enable-keyboard><span>{svg_checkmark}</span>{translate('Enable keyboard/mouse')}</li>
                <li #enable-clipboard><span>{svg_checkmark}</span>{translate('Enable clipboard')}</li>
                <li #enable-file-transfer><span>{svg_checkmark}</span>{translate('Enable file transfer')}</li> 
                <li #enable-remote-restart><span>{svg_checkmark}</span>{translate('Enable remote restart')}</li> 
                <li #enable-tunnel><span>{svg_checkmark}</span>{translate('Enable TCP tunneling')}</li>
                {is_win ? <li #enable-block-input><span>{svg_checkmark}</span>{translate('Enable blocking user input')}</li> : ""}
                <li #enable-lan-discovery><span>{svg_checkmark}</span>{translate('Enable LAN discovery')}</li>
                <AudioInputs />
                <Enhancements />
                <li #allow-remote-config-modification><span>{svg_checkmark}</span>{translate('Enable remote configuration modification')}</li>
                <div .separator />
                <li #custom-server>{translate('ID/Relay Server')}</li>
                <li #whitelist title={translate('whitelist_tip')}>{translate('IP Whitelisting')}</li>
                <li #socks5-server>{translate('Socks5 Proxy')}</li>
                <div .separator />
                <li #stop-service class={service_stopped ? "line-through" : "selected"}><span>{svg_checkmark}</span>{translate("Enable service")}</li>
                {is_win && handler.is_installed() ? <ShareRdp /> : ""}
                <DirectServer />
                {false && handler.using_public_server() && <li #allow-always-relay><span>{svg_checkmark}</span>{translate('Always connect via relay')}</li>}
                {handler.is_ok_change_id() ? <div .separator /> : ""}
                {username ? 
                <li #logout>{translate('Logout')} ({username})</li> :
                <li #login>{translate('Login')}</li>}
                {handler.is_ok_change_id() && key_confirmed && connect_status > 0 ? <li #change-id>{translate('Change ID')}</li> : ""}
                <div .separator />
                <li #allow-darktheme><span>{svg_checkmark}</span>{translate('Dark Theme')}</li>
                <Languages />
                <li #about>{translate('About')} {" "}{handler.get_app_name()}</li>
            </menu>
        </popup>;
    }

    event click $(svg#menu) (_, me) {
        this.showSettingMenu();
    }

    function showSettingMenu() {
        audioInputMenu.update({ show: true });
        this.toggleMenuState();
        if (direct_server) direct_server.update();
        var menu = this.$(menu#config-options);
        this.$(svg#menu).popup(menu);
    }

    event click $(li#login) () {
        login();
    }

    event click $(li#logout) () {
        logout();
    }

    function toggleMenuState() {
        for (var el in $$(menu#config-options>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
                el.attributes.toggleClass("line-through", !enabled);
            }
            if (el.id && el.id.indexOf("allow-") == 0) {
                var enabled = handler.get_option(el.id) == "Y";
                el.attributes.toggleClass("selected", enabled);
                el.attributes.toggleClass("line-through", !enabled);
            }
        }
    }

    function showAbout() {
        var name = handler.get_app_name();
        msgbox("custom-nocancel-nook-hasclose", translate("About") + " " + name, "<div style='line-height: 2em'> \
            <div>Version: " + handler.get_version() + " \
            <div>Fingerprint: " + handler.get_fingerprint() + " \
            <div .link .custom-event url='https://breitenstein.it/privacy-policy/'>" + translate("Privacy Statement") + "</div> \
            <div .link .custom-event url='https://rustdesk.com'>" + translate("Website") + "</div> \
	    <div style='background: #2c8cff; color: white; padding: 1em; margin-top: 1em;'>Copyright &copy; " + new Date().getFullYear() + " Breitenstein IT.\
            <br />" + handler.get_license() + " \
            <p style='font-weight: bold'>" + translate("Slogan_tip") + "</p>\
            </div>\
        </div>", "", function(el) {
            if (el && el.attributes) {
                handler.open_url(el.attributes['url']);
            };
        }, 400);
    }

    event click $(menu#config-options>li) (_, me) {
        if (me.id && me.id.indexOf("enable-") == 0) {
            handler.set_option(me.id, handler.get_option(me.id) == "N" ? "" : "N");
        }
        if (me.id && me.id.indexOf("allow-") == 0) {
            handler.set_option(me.id, handler.get_option(me.id) == "Y" ? "" : "Y");
        }
        if (me.id == "whitelist") {
            var old_value = handler.get_option("whitelist").split(",").join("\n");
            msgbox("custom-whitelist", translate("IP Whitelisting"), "<div .form> \
            <div>" + translate("whitelist_sep") + "</div> \
            <textarea .outline-focus spellcheck=\"false\" name=\"text\" novalue=\"0.0.0.0\" style=\"overflow: scroll-indicator; width:*; height: 140px; font-size: 1.2em; padding: 0.5em;\">" + old_value + "</textarea>\
            </div> \
            ", "", function(res=null) {
                if (!res) return;
                var value = (res.text || "").trim();
                if (value) {
                    var values = value.split(/[\s,;\n]+/g);
                    for (var ip in values) {
                        if (!ip.match(/^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)(\/([1-9]|[1-2][0-9]|3[0-2])){0,1}$/)
                            && !ip.match(/^(((?:[0-9A-Fa-f]{1,4}))*((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))*((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7})(\/([1-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])){0,1}$/)) {
                            return translate("Invalid IP") + ": " + ip;
                        }
                    }
                    value = values.join("\n");
                }
                if (value == old_value) return;
                stdout.println("whitelist updated");
                handler.set_option("whitelist", value.replace("\n", ","));
            }, 300);
        } else if (me.id == "custom-server") {
            var configOptions = handler.get_options();
            var old_relay = configOptions["relay-server"] || "";
            var old_api = configOptions["api-server"] || "";
            var old_id = configOptions["custom-rendezvous-server"] || "";
            var old_key = configOptions["key"] || "";
            msgbox("custom-server", "ID/Relay Server", "<div .form .set-password> \
            <div><span>" + translate("ID Server") + ": </span><input|text .outline-focus name='id' value='" + old_id + "' /></div> \
            <div><span>" + translate("Relay Server") + ": </span><input|text name='relay' value='" + old_relay + "' /></div> \
            <div><span>" + translate("API Server") + ": </span><input|text name='api' value='" + old_api + "' /></div> \
            <div><span>" + translate("Key") + ": </span><input|text name='key' value='" + old_key + "' /></div> \
            </div> \
            ", "", function(res=null) {
                if (!res) return;
                var id = (res.id || "").trim();
                var relay = (res.relay || "").trim();
                var api = (res.api || "").trim().toLowerCase();
                var key = (res.key || "").trim();
                if (id == old_id && relay == old_relay && key == old_key && api == old_api) return;
                if (id) {
                    var err = handler.test_if_valid_server(id);
                    if (err) return translate("ID Server") + ": " + err;
                }
                if (relay) {
                    var err = handler.test_if_valid_server(relay);
                    if (err) return translate("Relay Server") + ": " + err;
                }
                if (api) {
                    if (0 != api.indexOf("https://") && 0 != api.indexOf("http://")) {
                        return  translate("API Server") + ": " + translate("invalid_http");
                    }
                }
                configOptions["custom-rendezvous-server"] = id;
                configOptions["relay-server"] = relay;
                configOptions["api-server"] = api;
                configOptions["key"] = key;
                handler.set_options(configOptions);
            }, 260);
        } else if (me.id == "socks5-server") {
            var socks5 = handler.get_socks() || {};
            var old_proxy = socks5[0] || "";
            var old_username = socks5[1] || "";
            var old_password = socks5[2] || "";
            msgbox("custom-server", "Socks5 Proxy", <div .form .set-password> 
            <div><span>{translate("Server")}:</span><input|text .outline-focus name='proxy' value={old_proxy} /></div>
            <div><span>{translate("Username")}:</span><input|text name='username' value={old_username} /></div>
            <div><span>{translate("Password")}:</span><PasswordComponent value={old_password} /></div>
            </div>
            , "", function(res=null) {
                if (!res) return;
                var proxy = (res.proxy || "").trim();
                var username = (res.username || "").trim();
                var password = (res.password || "").trim();
                if (proxy == old_proxy && username == old_username && password == old_password) return;
                if (proxy) {
                    var err = handler.test_if_valid_server(proxy);
                    if (err) return translate("Server") + ": " + err;
                }
                handler.set_socks(proxy, username, password);
            }, 240);
        } else if (me.id == "stop-service") {
            handler.set_option("stop-service", service_stopped ? "" : "Y");
        } else if (me.id == "change-id") {
            msgbox("custom-id", translate("Change ID"), "<div .form .set-password> \
            <div>" + translate('id_change_tip') + " </div> \
            <div><span style='width: 100px; display:inline-block'>ID: </span><input|text .outline-focus style='width: 250px' name='id' /></div> \
            </div> \
            ", "", function(res=null, show_progress) {
                if (!res) return;
                show_progress();
                var id = (res.id || "").trim();
                if (!id) return;
                if (id == my_id) return;
                handler.change_id(id);
                function check_status() {
                    var status = handler.get_async_job_status();
                    if (status == " ") self.timer(0.1s, check_status);
                    else {
                        if (status) show_progress(false, translate(status));
                        else show_progress(-1);
                    }
                }
                check_status();
                return " ";
            });
        } else if (me.id == "allow-darktheme") {
            updateTheme();
        } else if (me.id == "about") {
            this.showAbout()
        }
    }
}

var is_edit_direct_access_port;
class EditDirectAccessPort: Reactor.Component {
    function render() {
        return <span style="margin-left: 12px; padding: 0 6px; display: inline-block;" .link>{svg_edit}</span>;
    }

    function onMouse(evt) {
        if (evt.type == Event.MOUSE_DOWN) {
            is_edit_direct_access_port = true;
            editDirectAccessPort();
        }
    }
}

function editDirectAccessPort() {
    var p0 = handler.get_option('direct-access-port');
    var port = p0 ? <input|text name='port' value={p0} /> :
                    <input|text name='port' novalue={21118} />;
    msgbox("custom-direct-access-port", translate('Direct IP Access Settings'), <div .form .set-password>
            <div><span style="width: 60px;">{translate('Port')}:</span>{port}</div>
        </div>, "", function(res=null) {
        if (!res) return;
        var p = (res.port || '').trim();
        if (p) {
            p = p.toInteger();
            if (!(p > 0)) {
                return translate("Invalid port");
            }
            p = p + '';
        }
        if (p != p0) handler.set_option('direct-access-port', p);
      });
}

class App: Reactor.Component
{
    function this() {
        app = this;
    }

    function render() {
        var is_can_screen_recording = handler.is_can_screen_recording(false);
        return
            <div .app>
                    <div .left-pane>
                    <div>
                        <div .title>{translate('Your Desktop')}</div>
                        <div .lighter-text>{translate('desk_tip')}</div>
                        <div .your-desktop>
                            <MyIdMenu />
                            {key_confirmed ? <input type="text" readonly value={formatId(get_id())}/> : translate("Generating ...")}
                        </div>
                        <PasswordArea />
                    </div>
                    {!is_win || handler.is_installed() ? "": <InstallMe />}
                    {software_update_url ? <UpdateMe /> : ""}
                    {is_win && handler.is_installed() && !software_update_url && handler.is_installed_lower_version() ? <UpgradeMe /> : ""}
                    {is_can_screen_recording ? "": <CanScreenRecording />}
                    {is_can_screen_recording && !handler.is_process_trusted(false) ? <TrustMe /> : ""}
                    {!service_stopped && is_can_screen_recording && handler.is_process_trusted(false) && handler.is_installed() && !handler.is_installed_daemon(false) ? <InstallDaemon /> : ""}
                    {system_error ? <SystemError /> : ""}
                    {!system_error && handler.is_login_wayland() && !handler.current_is_wayland() ? <FixWayland /> : ""}
                    {!system_error && handler.current_is_wayland() ? <ModifyDefaultLogin /> : ""}
                </div>
                <div .right-pane>
                    <div .right-content>
                        <div .card-connect>

                            <div .itb-logo>{svg_itb_logo}</div>

                            <div .title>{translate('Control Remote Desktop')}</div>
                            <ID @{this.remote_id} />
                            <div .right-buttons>
                                <button .button .outline #file-transfer>{translate('Transfer file')}</button>
                                <button .button #connect>{translate('Connect')}</button>
                            </div>
                        </div>
                        <div style="display:none">
                            <MultipleSessions @{this.multipleSessions}/>
                        </div>
                    </div>
                    <ConnectStatus @{this.connect_status} />
                </div>
                <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
            </div>;
    }

    event click $(button#connect) {
        this.newRemote("connect");
    }

    event click $(button#file-transfer) {
        this.newRemote("file-transfer");
    }

    function newRemote(type) {
        createNewConnect(this.remote_id.value, type);
    }
}

class InstallMe: Reactor.Component {
    function render() {
        return <div .install-me>
            <span />
            <div style="font-size:9pt; padding:0; margin:0">{translate('install_tip')}</div>
            <div><button #install-me .button>{translate('Install')}</button></div>
        </div>;

    }

    event click $(#install-me) {
        handler.goto_install();
    }
}

function download(from, to, args..) {
    var rqp = { type:#get, url: from, toFile: to };
    var fn = 0;
    var on = 0;
    for( var p in args ) {
        if( p instanceof Function ) {
            switch(++fn) {
                case 1: rqp.success = p; break;
                case 2: rqp.error = p; break;
                case 3: rqp.progress = p; break;
            }
        } else if( p instanceof Object ) {
            switch(++on) {
                case 1: rqp.params = p; break;
                case 2: rqp.headers = p; break;
            }
        }  
    }
    view.request(rqp);
}

// current running version is higher than installed
class UpgradeMe: Reactor.Component {
    function render() {
        var update_or_download = is_osx ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            <div>{translate('Your installation is lower version.')}</div>
            <div #install-me.link>{translate('Click to upgrade')}</div>
        </div>;
    }

    event click $(#install-me) {
        handler.update_me("");
    }
}

class UpdateMe: Reactor.Component {
    function render() {
        var update_or_download = "download"; // !is_win ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            <div>There is a newer version of {handler.get_app_name()} ({handler.get_new_version()}) available.</div>
            <div #install-me.link>{translate('Click to ' + update_or_download)}</div>
            <div #download-percent style="display:hidden; padding-top: 1em;" />
        </div>;
    }

    event click $(#install-me) {
        handler.open_url("https://rustdesk.com/download");
        return;
        if (!is_win) {
            handler.open_url("https://rustdesk.com");
            return;
        }
        var url = software_update_url + '.' + handler.get_software_ext();
        var path = handler.get_software_store_path();
        var onsuccess = function(md5) {
            $(#download-percent).content(translate("Installing ..."));
            handler.update_me(path);
        };
        var onerror = function(err) {
            msgbox("custom-error", "Download Error", "Failed to download"); 
        };
        var onprogress = function(loaded, total) {
            if (!total) total = 5 * 1024 * 1024;
            var el = $(#download-percent);
            el.style.set{display: "block"};
            el.content("Downloading %" + (loaded * 100 / total));
        };
        stdout.println("Downloading " + url + " to " + path);
        download(
            url,
            self.url(path),
            onsuccess, onerror, onprogress);
    }
}

class SystemError: Reactor.Component {
    function render() {
        return <div .install-me>
            <div>{system_error}</div>
        </div>;
    }
}

class TrustMe: Reactor.Component {
    function render() {
        return <div .trust-me #trust-me-box>
            <div>{translate('Permissions')}</div>
            <div>{translate('config_acc')}</div>
            <div #trust-me .link>{translate('Configure')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#trust-me) {
        handler.is_process_trusted(true);
        watch_trust();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_mac_permission"));
    }
}

class CanScreenRecording: Reactor.Component {
    function render() {
        return <div .trust-me #screen-recording-box>
            <div>{translate('Permissions')}</div>
            <div>{translate('config_screen')}</div>
            <div #screen-recording .link>{translate('Configure')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#screen-recording) {
        handler.is_can_screen_recording(true);
        watch_screen_recording();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_mac_permission"));
    }
}

class InstallDaemon: Reactor.Component {
    function render() {
        return <div .install-me>
            <span />
            <div>{translate('install_daemon_tip')}</div>
            <div #install-me.link>{translate('Install')}</div>
        </div>;
    }

    event click $(#install-me) {
        handler.is_installed_daemon(true);
    }
}

class FixWayland: Reactor.Component {
    function render() {
        return <div .trust-me>
            <div>{translate('Warning')}</div>
            <div>{translate('Login screen using Wayland is not supported')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#help-me) {
        handler.open_url(translate("doc_fix_wayland"));
    }
}

class ModifyDefaultLogin: Reactor.Component {
    function render() {
        return <div .trust-me>
            <div>{translate('Warning')}</div>
            <div>{translate('wayland_experiment_tip')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#help-me) {
        handler.open_url(translate("doc_fix_wayland"));
    }
}

function watch_trust() {
    // not use TrustMe::update, because it is buggy
    var trusted = handler.is_process_trusted(false);
    var el = $(div#trust-me-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_trust);
}

function watch_screen_recording() {
    var trusted = handler.is_can_screen_recording(false);
    var el = $(div#screen-recording-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_screen_recording);
}

class PasswordEyeArea : Reactor.Component {
    render() {
        var method = handler.get_option('verification-method');
        var mode= handler.get_option('approve-mode');
        var value = mode == 'click' ||  method == 'use-permanent-password' ? "-" : password_cache[0];
        return
            <div .eye-area style="width: *">
                <input|text @{this.input} readonly value={value} />
                {svg_refresh_password}
            </div>;
    }

    event click $(svg#refresh-password) (_, me) {
        handler.update_temporary_password();
        this.update();
    }
}

var temporaryPasswordLengthMenu;
class TemporaryPasswordLengthMenu: Reactor.Component {
    function this() {
        temporaryPasswordLengthMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var me = this;
        var method = handler.get_option('verification-method');
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li disabled={ method == 'use-permanent-password' ? "true" : "false" }>{translate("One-time password length")}
            <menu #temporary-password-length>
                <li #temporary-password-length-6><span>{svg_checkmark}</span>6</li>
                <li #temporary-password-length-8><span>{svg_checkmark}</span>8</li>
                <li #temporary-password-length-10><span>{svg_checkmark}</span>10</li>
            </menu>
        </li>;
    }

    function toggleMenuState() {
        var length = handler.get_option("temporary-password-length");
        var index = ['6', '8', '10'].indexOf(length);
        if (index < 0) index = 0;
        for (var (i, el) in this.$$(menu#temporary-password-length>li)) {
            el.attributes.toggleClass("selected", i == index);
        }
    }

    event click $(menu#temporary-password-length>li) (_, me) {
        var length = me.id.substring('temporary-password-length-'.length);
        var old_length = handler.get_option('temporary-password-length');
        if (length != old_length) {
            handler.set_option('temporary-password-length', length);
            handler.update_temporary_password();
            this.toggleMenuState();
            passwordArea.update();
        }
    }
}

var passwordArea;
class PasswordArea: Reactor.Component {
    function this() {
        passwordArea = this;
    }

    function render() {
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return 
        <div .your-desktop>
            <div>{translate('One-time Password')}</div>
            <div .password style="flow:horizontal">
                {this.renderPop()}
                <PasswordEyeArea />
                {svg_edit}
            </div>
        </div>;
    }

    function renderPop() {
        var method = handler.get_option('verification-method');
        var approve_mode= handler.get_option('approve-mode');
        var show_password = approve_mode != 'click';
        return <popup><menu.context #edit-password-context>
            <li #approve-mode-password><span>{svg_checkmark}</span>{translate('Accept sessions via password')}</li>
            <li #approve-mode-click><span>{svg_checkmark}</span>{translate('Accept sessions via click')}</li>
            <li #approve-mode-both><span>{svg_checkmark}</span>{translate('Accept sessions via both')}</li>
            { !show_password ? '' : <div .separator /> }
            { !show_password ? '' : <li #use-temporary-password><span>{svg_checkmark}</span>{translate('Use one-time password')}</li> }
            { !show_password ? '' : <li #use-permanent-password><span>{svg_checkmark}</span>{translate('Use permanent password')}</li> }
            { !show_password ? '' : <li #use-both-passwords><span>{svg_checkmark}</span>{translate('Use both passwords')}</li> }
            { !show_password ? '' : <div .separator /> }
            { !show_password ? '' : <li #set-password  disabled={ method == 'use-temporary-password' ? "true" : "false" }>{translate('Set permanent password')}</li> }
            { !show_password ? '' : <TemporaryPasswordLengthMenu /> }
            <div .separator />
            <li #tfa><span>{svg_checkmark}</span>{translate('enable-2fa-title')}</li>
        </menu></popup>;
    }

    function toggleMenuState() {
         var mode= handler.get_option('approve-mode');
        var mode_id;
        if (mode == 'password')
            mode_id = 'approve-mode-password';
        else if (mode == 'click')
            mode_id = 'approve-mode-click';
        else
            mode_id = 'approve-mode-both';
        var pwd_id = handler.get_option('verification-method');
        if (pwd_id != 'use-temporary-password' && pwd_id != 'use-permanent-password')
            pwd_id = 'use-both-passwords';
        var has_valid_2fa = handler.has_valid_2fa();
        for (var el in this.$$(menu#edit-password-context>li)) {
            if (el.id.indexOf("approve-mode-") == 0)
                el.attributes.toggleClass("selected", el.id == mode_id);
            if (el.id.indexOf("use-") == 0)
                el.attributes.toggleClass("selected", el.id == pwd_id);
            if (el.id == "tfa")
                el.attributes.toggleClass("selected", has_valid_2fa);
        }
    }

    event click $(svg#edit) (_, me) {
        var approve_mode= handler.get_option('approve-mode');
        var show_password = approve_mode != 'click';
        if(show_password && temporaryPasswordLengthMenu) temporaryPasswordLengthMenu.update({show: true });
        var menu = $(menu#edit-password-context);        
        me.popup(menu);
    }

    event click $(li#set-password) {
        var me = this;
        var password = handler.permanent_password();
        var value_field = password.length == 0 ? "" : "value=" + password;
        msgbox("custom-password", translate("Set Password"), "<div .form .set-password> \
            <div><span>" + translate('Password') + ":</span><input|password(password) .outline-focus " + value_field + " /></div> \
            <div><span>" + translate('Confirmation') + ":</span><input|password(confirmation) " + value_field + " /></div> \
        </div> \
        ", "", function(res=null) {
            if (!res) return;
            var p0 = (res.password || "").trim();
            var p1 = (res.confirmation || "").trim();
            if (p0.length < 6 && p0.length != 0) {
                return translate("Too short, at least 6 characters.");
            }
            if (p0 != p1) {
                return translate("The confirmation is not identical.");
            }
            handler.set_permanent_password(p0);
            me.update();
        });
    }

    event click $(menu#edit-password-context>li) (_, me) {
        if (me.id.indexOf('use-') == 0) {
            handler.set_option('verification-method', me.id);
            this.toggleMenuState();
            passwordArea.update();
        } else if (me.id.indexOf('approve-mode') == 0) {
            var approve_mode;
            if (me.id == 'approve-mode-password')
                approve_mode = 'password';
            else if (me.id == 'approve-mode-click')
                approve_mode = 'click';
            else
                approve_mode = '';
            handler.set_option('approve-mode', approve_mode);
            this.toggleMenuState();
            passwordArea.update();
        }
    }

    event click $(li#tfa) {
        var me = this;
        var has_valid_2fa = handler.has_valid_2fa();
        if (has_valid_2fa) {
            handler.set_option('2fa', '');
            me.update();
        } else {
            var new2fa = handler.generate2fa();
            var src = handler.generate_2fa_img_src(new2fa);
            msgbox("custom-2fa-setting", translate('enable-2fa-title'),
                <div .form>
                    <div>{translate('enable-2fa-desc')}</div>
                    <img src={src} />
                    <div .code><input name='code' type='text' .outline-focus /></div>
                </div>
                , "", function(res=null) {
                if (!res) return;
                if (!res.code) return;
                if (!handler.verify2fa(res.code)) {
                    return translate('wrong-2fa-code');
                }
                me.update();
            }, 400);
        }
    }
}

var password_cache = ["","","",""];
function updatePasswordArea() {
    self.timer(1s, function() {
        var temporary_password = handler.temporary_password();
        var verification_method = handler.get_option('verification-method');
        var temporary_password_length = handler.get_option('temporary-password-length');
        var approve_mode = handler.get_option('approve-mode');
        var update = false;
        if (password_cache[0] != temporary_password) {
            password_cache[0] = temporary_password;
            update = true;
        }
        if (password_cache[1] != verification_method) {
            password_cache[1] = verification_method;
            update = true;
        }
        if (password_cache[2] != temporary_password_length) {
            password_cache[2] = temporary_password_length;
            update = true;
        }
        if (password_cache[3] != approve_mode) {
            password_cache[3] = approve_mode;
            update = true;
        }
        if (update) passwordArea.update();
        updatePasswordArea();
    });                          
}
updatePasswordArea();

class ID: Reactor.Component {
    function render() {
        return <input type="text" #remote_id .outline-focus novalue={translate("Enter Remote ID")}
        value={formatId(handler.get_remote_id())} />;
    }

    // https://github.com/c-smile/sciter-sdk/blob/master/doc/content/sciter/Event.htm
    event change {
        var fid = formatId(this.value);
        var d = this.value.length - (this.old_value || "").length;
        this.old_value = this.value;
        var start = this.xcall(#selectionStart) || 0;
        var end = this.xcall(#selectionEnd);
        if (fid == this.value || d <= 0 || start != end) {
            return;
        }
        // fix Caret position
        this.value = fid;
        var text_after_caret = this.old_value.substr(start);
        var n = fid.length - formatId(text_after_caret).length;
        this.xcall(#setSelection, n, n);
    }
}

var reg = /^\d+$/;
function formatId(id) {
    id = id.replace(/\s/g, "");
    if (reg.test(id) && id.length > 3) {
        var n = id.length;
        var a = n % 3 || 3;
        var new_id = id.substr(0, a);
        for (var i = a; i < n; i += 3) {
            new_id += " " + id.substr(i, 3);
        }
        return new_id;
    }
    return id;
}

event keydown (evt) {
    if (view.focus && view.focus.id != 'remote_id') {
        return;
    }
    if (!evt.shortcutKey) {
        if (isEnterKey(evt)) {
            var el = $(button#connect);
            view.focus = el;
            el.sendEvent("click");
            // simulate button click effect, windows does not have this issue
            el.attributes.toggleClass("active", true);
            self.timer(0.3s, function() {
                el.attributes.toggleClass("active", false);
            });
        }
    }
}

$(body).content(<div style="size:*"><App /><div #msgbox /></div>);

function self.closing() {
    var (x, y, w, h) = view.box(#rectw, #border, #screen);
    handler.closing(x, y, w, h);
    return true;
}

function self.ready() {
    var r = handler.get_size();
    if (isReasonableSize(r) && r[2] > 0) {
        var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
        if (r[2] >= sw && r[3] >= sh) {
            self.timer(1ms, function() { view.windowState = View.WINDOW_MAXIMIZED; });
        } else {
            view.move(r[0], r[1], r[2], r[3]);
        }
    } else {
        centerize(scaleIt(800), scaleIt(600));
    }
    if (!handler.get_remote_id()) {
        view.focus = $(#remote_id);
    }
    refreshCurrentUser();
    updateTheme();
}

function showAbout() {
    myIdMenu.showAbout();
}

function showSettings() {
    if ($(#overlay).style#display == 'block') return;
    myIdMenu.showSettingMenu();
}

function checkConnectStatus() {
    handler.check_mouse_time(); // trigger connection status updater
    self.timer(1s, function() {
        var tmp = !!handler.get_option("stop-service");
        if (tmp != service_stopped) {
            service_stopped = tmp;
            app.update();
        }
        tmp = handler.using_public_server();
        if (tmp != using_public_server) {
            using_public_server = tmp;
            app.connect_status.update();
        }
        tmp = handler.get_connect_status();
        if (tmp[0] != connect_status) {
            connect_status = tmp[0];
            app.connect_status.update();
            myIdMenu.update();
        }
        if (tmp[1] != key_confirmed) {
            key_confirmed = tmp[1];
            app.update();
        }
        if (tmp[2] && tmp[2] != my_id) {
            stdout.println("id updated");
            app.update();
        }
        tmp = handler.get_error();
        if (system_error != tmp) {
            system_error = tmp;
            app.update();
        }
        tmp = handler.get_software_update_url();
        if (tmp != software_update_url) {
            software_update_url = tmp;
            app.update();
        }
        if (handler.recent_sessions_updated()) {
            stdout.println("recent sessions updated");
            updateAbPeer();
            app.update();
        }
        check_if_overlay();
        checkConnectStatus();    
    });                          
}                                
                                 
var enter = false;               
function self.onMouse(evt) {     
    switch(evt.type) {           
    case Event.MOUSE_ENTER:    
        enter = true;
        check_if_overlay();
        break;
    case Event.MOUSE_LEAVE:
        $(#overlay).style#display = 'none';
        enter = false;
        break;
    }
}

function check_if_overlay() {
    if (!handler.get_option('allow-remote-config-modification')) {
        var time0 = getTime();
        handler.check_mouse_time();
        self.timer(120ms, function() {
            if (!enter) return;
            var d = time0 - handler.get_mouse_time();
            if (d < 120) $(#overlay).style#display = 'block';
        });
    }
}

checkConnectStatus();

function set_local_user_info(user) {
    var user_info = {name: user.name};
    if (user.status) {
        user_info.status = user.status;
    }
    handler.set_local_option("user_info", JSON.stringify(user_info));
}

function login() {
    var name0 = getUserName();
    var pass0 = '';
    msgbox("custom-login", translate('Login'), <div .form .set-password> 
            <div><span>{translate('Username')}:</span><input|text name="username" value={name0} .outline-focus /></div> 
            <div><span>{translate('Password')}:</span><PasswordComponent value={pass0} /></div> 
        </div>, "", function(res=null, show_progress) {
        if (!res) return;
        show_progress();
        var name = (res.username || '').trim();
        if (!name) {
            show_progress(false, translate("Username missed"));
            return " ";
        }
        var pass = (res.password || '').trim();
        if (!pass) {
            show_progress(false, translate("Password missed"));
            return " ";
        }
        abLoading = true;
        var url = handler.get_api_server();
        httpRequest(url + "/api/login", #post, {username: name, password: pass, id: my_id, uuid: handler.get_uuid(), type: 'account', deviceInfo: getDeviceInfo()}, function(data) {
            if (data.error) {
                abLoading = false;
                var err = translate(data.error);
                show_progress(false, err);
                return;
            }
            if (data.type == 'email_check') {
                abLoading = false;
                show_progress(-1);
                on_2fa_check(data);
                return;
            }
            handler.set_local_option("access_token", data.access_token);
            set_local_user_info(data.user);
            show_progress(-1);
            myIdMenu.update();
            getAb();
        }, function(err, status) {
            abLoading = false;
            err = translate(err);
            if (url.indexOf('rustdesk') < 0) err = url + ', ' + err;
            show_progress(false, err);
        });
        return " ";
      });
}

function on_2fa_check(last_msg) {
    const isEmailCheck = !last_msg.tfa_type || last_msg.tfa_type == 'email_check';
    const secret = last_msg.secret;
    const emailHint = last_msg.user.email;

    msgbox("custom-2fa-verification-code", translate('Verification code'), <div .form .set-password> 
            { isEmailCheck && <div><span>{translate('Email')}:</span><span>{emailHint}</span></div> }
            <div><span>{translate(isEmailCheck ? 'Verification code' : '2FA code')}:</span><input|text name="verification_code" .outline-focus /></div> 
            { isEmailCheck && <div style="font-size:0.9em; margin-bottom:1em;">{translate('verification_tip')}</div> }
        </div>, "", 
        function(res=null, show_progress) {
            if (!res) return;
            show_progress();
            var code = (res.verification_code || '').trim();
            if (!code || code.length < 6) {
                show_progress(false, translate("Too short, at least 6 characters."));
                return " ";
            }
            abLoading = true;
            var url = handler.get_api_server();
            const loginData = {
                username: last_msg.user.name,
                id: my_id,
                uuid: handler.get_uuid(),
                type: 'email_code',
                verificationCode: code,
                tfaCode: isEmailCheck ? '' : code,
                secret: secret,
                deviceInfo: getDeviceInfo()
            };
            httpRequest(url + "/api/login", #post, loginData, 
                function(data) {
                    if (data.error) {
                        abLoading = false;
                        show_progress(false, data.error);
                        return;
                    }
                    handler.set_local_option("access_token", data.access_token);
                    set_local_user_info(data.user);
                    show_progress(-1);
                    myIdMenu.update();
                    getAb();
                },
                function(err, status) {
                    abLoading = false;
                    err = translate(err);
                    if (url.indexOf('rustdesk') < 0) err = url + ', ' + err;
                    show_progress(false, err);
                }
            );
            return " ";
        }
    );
}

function reset_token() {
    handler.set_local_option("access_token", "");
    handler.set_local_option("user_info", "");
    handler.set_local_option("selected-tags", "");
    myIdMenu.update();
    resetAb();
    if (abComponent) {
        abComponent.update();
    }
}

function logout() {
    var url = handler.get_api_server();
    httpRequest(url + "/api/logout", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
    }, function(err, status) {
        msgbox("custom-error", translate('Error'), err);
    }, getHttpHeaders());
    reset_token();
}

function refreshCurrentUser() {
    if (!handler.get_local_option("access_token")) return;
    abLoading = true;
    abError = "";
    app.update();
    httpRequest(handler.get_api_server() + "/api/currentUser", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
        if (data.error) {
            if (data.error == 'Invalid token') {
              reset_token();
            }
            handleAbError(data.error);
            return;
        }
        set_local_user_info(data);
        myIdMenu.update();
        getAb();
    }, function(err, status) {
        if (status == 401 || status == 400) {
            reset_token();
        }
        handleAbError(err);
    }, getHttpHeaders());
} 

function getHttpHeaders() {
    return "Authorization: Bearer " + handler.get_local_option("access_token");
}

function getDeviceInfo() {
    return JSON.parse(handler.get_login_device_info());
}
